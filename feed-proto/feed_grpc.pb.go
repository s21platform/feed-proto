// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package feed_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// FeedServiseClient is the client API for FeedServise service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeedServiseClient interface {
	CreateUserPost(ctx context.Context, in *CreateUserPostIn, opts ...grpc.CallOption) (*CreateUserPostOut, error)
}

type feedServiseClient struct {
	cc grpc.ClientConnInterface
}

func NewFeedServiseClient(cc grpc.ClientConnInterface) FeedServiseClient {
	return &feedServiseClient{cc}
}

func (c *feedServiseClient) CreateUserPost(ctx context.Context, in *CreateUserPostIn, opts ...grpc.CallOption) (*CreateUserPostOut, error) {
	out := new(CreateUserPostOut)
	err := c.cc.Invoke(ctx, "/FeedServise/CreateUserPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeedServiseServer is the server API for FeedServise service.
// All implementations must embed UnimplementedFeedServiseServer
// for forward compatibility
type FeedServiseServer interface {
	CreateUserPost(context.Context, *CreateUserPostIn) (*CreateUserPostOut, error)
	mustEmbedUnimplementedFeedServiseServer()
}

// UnimplementedFeedServiseServer must be embedded to have forward compatible implementations.
type UnimplementedFeedServiseServer struct {
}

func (UnimplementedFeedServiseServer) CreateUserPost(context.Context, *CreateUserPostIn) (*CreateUserPostOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPost not implemented")
}
func (UnimplementedFeedServiseServer) mustEmbedUnimplementedFeedServiseServer() {}

// UnsafeFeedServiseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeedServiseServer will
// result in compilation errors.
type UnsafeFeedServiseServer interface {
	mustEmbedUnimplementedFeedServiseServer()
}

func RegisterFeedServiseServer(s *grpc.Server, srv FeedServiseServer) {
	s.RegisterService(&_FeedServise_serviceDesc, srv)
}

func _FeedServise_CreateUserPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPostIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeedServiseServer).CreateUserPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FeedServise/CreateUserPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeedServiseServer).CreateUserPost(ctx, req.(*CreateUserPostIn))
	}
	return interceptor(ctx, in, info, handler)
}

var _FeedServise_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FeedServise",
	HandlerType: (*FeedServiseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserPost",
			Handler:    _FeedServise_CreateUserPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "feed.proto",
}
